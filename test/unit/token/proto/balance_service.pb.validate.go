// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: balance_service.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AddressMultiError, or nil if none found.
func (m *Address) ValidateAll() error {
	return m.validate(true)
}

func (m *Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_Address_Base58Check_Pattern.MatchString(m.GetBase58Check()) {
		err := AddressValidationError{
			field:  "Base58Check",
			reason: "value does not match regex pattern \"^[1-9A-HJ-NP-Za-km-z]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddressMultiError(errors)
	}

	return nil
}

// AddressMultiError is an error wrapping multiple validation errors returned
// by Address.ValidateAll() if the designated constraints aren't met.
type AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressMultiError) AllErrors() []error { return m }

// AddressValidationError is the validation error returned by Address.Validate
// if the designated constraints aren't met.
type AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressValidationError) ErrorName() string { return "AddressValidationError" }

// Error satisfies the builtin error interface
func (e AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressValidationError{}

var _Address_Base58Check_Pattern = regexp.MustCompile("^[1-9A-HJ-NP-Za-km-z]+$")

// Validate checks the field values on BigInt with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BigInt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BigInt with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BigIntMultiError, or nil if none found.
func (m *BigInt) ValidateAll() error {
	return m.validate(true)
}

func (m *BigInt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_BigInt_Value_Pattern.MatchString(m.GetValue()) {
		err := BigIntValidationError{
			field:  "Value",
			reason: "value does not match regex pattern \"^[0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BigIntMultiError(errors)
	}

	return nil
}

// BigIntMultiError is an error wrapping multiple validation errors returned by
// BigInt.ValidateAll() if the designated constraints aren't met.
type BigIntMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BigIntMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BigIntMultiError) AllErrors() []error { return m }

// BigIntValidationError is the validation error returned by BigInt.Validate if
// the designated constraints aren't met.
type BigIntValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BigIntValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BigIntValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BigIntValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BigIntValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BigIntValidationError) ErrorName() string { return "BigIntValidationError" }

// Error satisfies the builtin error interface
func (e BigIntValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBigInt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BigIntValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BigIntValidationError{}

var _BigInt_Value_Pattern = regexp.MustCompile("^[0-9]+$")

// Validate checks the field values on BalanceAdjustmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BalanceAdjustmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BalanceAdjustmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BalanceAdjustmentRequestMultiError, or nil if none found.
func (m *BalanceAdjustmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BalanceAdjustmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAddress() == nil {
		err := BalanceAdjustmentRequestValidationError{
			field:  "Address",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BalanceAdjustmentRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BalanceAdjustmentRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BalanceAdjustmentRequestValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAmount() == nil {
		err := BalanceAdjustmentRequestValidationError{
			field:  "Amount",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BalanceAdjustmentRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BalanceAdjustmentRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BalanceAdjustmentRequestValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetReason()); l < 1 || l > 200 {
		err := BalanceAdjustmentRequestValidationError{
			field:  "Reason",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BalanceAdjustmentRequestMultiError(errors)
	}

	return nil
}

// BalanceAdjustmentRequestMultiError is an error wrapping multiple validation
// errors returned by BalanceAdjustmentRequest.ValidateAll() if the designated
// constraints aren't met.
type BalanceAdjustmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BalanceAdjustmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BalanceAdjustmentRequestMultiError) AllErrors() []error { return m }

// BalanceAdjustmentRequestValidationError is the validation error returned by
// BalanceAdjustmentRequest.Validate if the designated constraints aren't met.
type BalanceAdjustmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BalanceAdjustmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BalanceAdjustmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BalanceAdjustmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BalanceAdjustmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BalanceAdjustmentRequestValidationError) ErrorName() string {
	return "BalanceAdjustmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BalanceAdjustmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBalanceAdjustmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BalanceAdjustmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BalanceAdjustmentRequestValidationError{}
