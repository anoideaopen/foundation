// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: balance_service.proto

package service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AddressMultiError, or nil if none found.
func (m *Address) ValidateAll() error {
	return m.validate(true)
}

func (m *Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_Address_Address_Pattern.MatchString(m.GetAddress()) {
		err := AddressValidationError{
			field:  "Address",
			reason: "value does not match regex pattern \"^[1-9A-HJ-NP-Za-km-z]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddressMultiError(errors)
	}

	return nil
}

// AddressMultiError is an error wrapping multiple validation errors returned
// by Address.ValidateAll() if the designated constraints aren't met.
type AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressMultiError) AllErrors() []error { return m }

// AddressValidationError is the validation error returned by Address.Validate
// if the designated constraints aren't met.
type AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressValidationError) ErrorName() string { return "AddressValidationError" }

// Error satisfies the builtin error interface
func (e AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressValidationError{}

var _Address_Address_Pattern = regexp.MustCompile("^[1-9A-HJ-NP-Za-km-z]+$")

// Validate checks the field values on BigInt with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BigInt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BigInt with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BigIntMultiError, or nil if none found.
func (m *BigInt) ValidateAll() error {
	return m.validate(true)
}

func (m *BigInt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_BigInt_Value_Pattern.MatchString(m.GetValue()) {
		err := BigIntValidationError{
			field:  "Value",
			reason: "value does not match regex pattern \"^[0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BigIntMultiError(errors)
	}

	return nil
}

// BigIntMultiError is an error wrapping multiple validation errors returned by
// BigInt.ValidateAll() if the designated constraints aren't met.
type BigIntMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BigIntMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BigIntMultiError) AllErrors() []error { return m }

// BigIntValidationError is the validation error returned by BigInt.Validate if
// the designated constraints aren't met.
type BigIntValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BigIntValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BigIntValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BigIntValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BigIntValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BigIntValidationError) ErrorName() string { return "BigIntValidationError" }

// Error satisfies the builtin error interface
func (e BigIntValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBigInt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BigIntValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BigIntValidationError{}

var _BigInt_Value_Pattern = regexp.MustCompile("^[0-9]+$")

// Validate checks the field values on Balance with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Balance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Balance with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BalanceMultiError, or nil if none found.
func (m *Balance) ValidateAll() error {
	return m.validate(true)
}

func (m *Balance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Suffix

	if !_Balance_Value_Pattern.MatchString(m.GetValue()) {
		err := BalanceValidationError{
			field:  "Value",
			reason: "value does not match regex pattern \"^[0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BalanceMultiError(errors)
	}

	return nil
}

// BalanceMultiError is an error wrapping multiple validation errors returned
// by Balance.ValidateAll() if the designated constraints aren't met.
type BalanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BalanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BalanceMultiError) AllErrors() []error { return m }

// BalanceValidationError is the validation error returned by Balance.Validate
// if the designated constraints aren't met.
type BalanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BalanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BalanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BalanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BalanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BalanceValidationError) ErrorName() string { return "BalanceValidationError" }

// Error satisfies the builtin error interface
func (e BalanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBalance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BalanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BalanceValidationError{}

var _Balance_Value_Pattern = regexp.MustCompile("^[0-9]+$")

// Validate checks the field values on BalanceRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BalanceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BalanceRequestMultiError,
// or nil if none found.
func (m *BalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAddress() == nil {
		err := BalanceRequestValidationError{
			field:  "Address",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BalanceRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BalanceRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BalanceRequestValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetSuffix()); l < 1 || l > 20 {
		err := BalanceRequestValidationError{
			field:  "Suffix",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BalanceRequestMultiError(errors)
	}

	return nil
}

// BalanceRequestMultiError is an error wrapping multiple validation errors
// returned by BalanceRequest.ValidateAll() if the designated constraints
// aren't met.
type BalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BalanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BalanceRequestMultiError) AllErrors() []error { return m }

// BalanceRequestValidationError is the validation error returned by
// BalanceRequest.Validate if the designated constraints aren't met.
type BalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BalanceRequestValidationError) ErrorName() string { return "BalanceRequestValidationError" }

// Error satisfies the builtin error interface
func (e BalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BalanceRequestValidationError{}

// Validate checks the field values on BalanceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BalanceResponseMultiError, or nil if none found.
func (m *BalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_BalanceResponse_Balance_Pattern.MatchString(m.GetBalance()) {
		err := BalanceResponseValidationError{
			field:  "Balance",
			reason: "value does not match regex pattern \"^[0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BalanceResponseMultiError(errors)
	}

	return nil
}

// BalanceResponseMultiError is an error wrapping multiple validation errors
// returned by BalanceResponse.ValidateAll() if the designated constraints
// aren't met.
type BalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BalanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BalanceResponseMultiError) AllErrors() []error { return m }

// BalanceResponseValidationError is the validation error returned by
// BalanceResponse.Validate if the designated constraints aren't met.
type BalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BalanceResponseValidationError) ErrorName() string { return "BalanceResponseValidationError" }

// Error satisfies the builtin error interface
func (e BalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BalanceResponseValidationError{}

var _BalanceResponse_Balance_Pattern = regexp.MustCompile("^[0-9]+$")

// Validate checks the field values on AllBalancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllBalancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllBalancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllBalancesRequestMultiError, or nil if none found.
func (m *AllBalancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllBalancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAddress() == nil {
		err := AllBalancesRequestValidationError{
			field:  "Address",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AllBalancesRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AllBalancesRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AllBalancesRequestValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AllBalancesRequestMultiError(errors)
	}

	return nil
}

// AllBalancesRequestMultiError is an error wrapping multiple validation errors
// returned by AllBalancesRequest.ValidateAll() if the designated constraints
// aren't met.
type AllBalancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllBalancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllBalancesRequestMultiError) AllErrors() []error { return m }

// AllBalancesRequestValidationError is the validation error returned by
// AllBalancesRequest.Validate if the designated constraints aren't met.
type AllBalancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllBalancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllBalancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllBalancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllBalancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllBalancesRequestValidationError) ErrorName() string {
	return "AllBalancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AllBalancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllBalancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllBalancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllBalancesRequestValidationError{}

// Validate checks the field values on AllBalancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllBalancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllBalancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllBalancesResponseMultiError, or nil if none found.
func (m *AllBalancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AllBalancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBalances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllBalancesResponseValidationError{
						field:  fmt.Sprintf("Balances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllBalancesResponseValidationError{
						field:  fmt.Sprintf("Balances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllBalancesResponseValidationError{
					field:  fmt.Sprintf("Balances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllBalancesResponseMultiError(errors)
	}

	return nil
}

// AllBalancesResponseMultiError is an error wrapping multiple validation
// errors returned by AllBalancesResponse.ValidateAll() if the designated
// constraints aren't met.
type AllBalancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllBalancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllBalancesResponseMultiError) AllErrors() []error { return m }

// AllBalancesResponseValidationError is the validation error returned by
// AllBalancesResponse.Validate if the designated constraints aren't met.
type AllBalancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllBalancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllBalancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllBalancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllBalancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllBalancesResponseValidationError) ErrorName() string {
	return "AllBalancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AllBalancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllBalancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllBalancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllBalancesResponseValidationError{}

// Validate checks the field values on AllowedBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllowedBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllowedBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllowedBalanceRequestMultiError, or nil if none found.
func (m *AllowedBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllowedBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAddress() == nil {
		err := AllowedBalanceRequestValidationError{
			field:  "Address",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AllowedBalanceRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AllowedBalanceRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AllowedBalanceRequestValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetToken()); l < 1 || l > 20 {
		err := AllowedBalanceRequestValidationError{
			field:  "Token",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AllowedBalanceRequestMultiError(errors)
	}

	return nil
}

// AllowedBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by AllowedBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type AllowedBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllowedBalanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllowedBalanceRequestMultiError) AllErrors() []error { return m }

// AllowedBalanceRequestValidationError is the validation error returned by
// AllowedBalanceRequest.Validate if the designated constraints aren't met.
type AllowedBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllowedBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllowedBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllowedBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllowedBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllowedBalanceRequestValidationError) ErrorName() string {
	return "AllowedBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AllowedBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllowedBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllowedBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllowedBalanceRequestValidationError{}

// Validate checks the field values on AllowedBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllowedBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllowedBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllowedBalanceResponseMultiError, or nil if none found.
func (m *AllowedBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AllowedBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_AllowedBalanceResponse_Balance_Pattern.MatchString(m.GetBalance()) {
		err := AllowedBalanceResponseValidationError{
			field:  "Balance",
			reason: "value does not match regex pattern \"^[0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AllowedBalanceResponseMultiError(errors)
	}

	return nil
}

// AllowedBalanceResponseMultiError is an error wrapping multiple validation
// errors returned by AllowedBalanceResponse.ValidateAll() if the designated
// constraints aren't met.
type AllowedBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllowedBalanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllowedBalanceResponseMultiError) AllErrors() []error { return m }

// AllowedBalanceResponseValidationError is the validation error returned by
// AllowedBalanceResponse.Validate if the designated constraints aren't met.
type AllowedBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllowedBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllowedBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllowedBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllowedBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllowedBalanceResponseValidationError) ErrorName() string {
	return "AllowedBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AllowedBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllowedBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllowedBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllowedBalanceResponseValidationError{}

var _AllowedBalanceResponse_Balance_Pattern = regexp.MustCompile("^[0-9]+$")

// Validate checks the field values on BalanceAdjustmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BalanceAdjustmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BalanceAdjustmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BalanceAdjustmentRequestMultiError, or nil if none found.
func (m *BalanceAdjustmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BalanceAdjustmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetSuffix()); l < 1 || l > 20 {
		err := BalanceAdjustmentRequestValidationError{
			field:  "Suffix",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAddress() == nil {
		err := BalanceAdjustmentRequestValidationError{
			field:  "Address",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BalanceAdjustmentRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BalanceAdjustmentRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BalanceAdjustmentRequestValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAmount() == nil {
		err := BalanceAdjustmentRequestValidationError{
			field:  "Amount",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BalanceAdjustmentRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BalanceAdjustmentRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BalanceAdjustmentRequestValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetReason()); l < 1 || l > 200 {
		err := BalanceAdjustmentRequestValidationError{
			field:  "Reason",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BalanceAdjustmentRequestMultiError(errors)
	}

	return nil
}

// BalanceAdjustmentRequestMultiError is an error wrapping multiple validation
// errors returned by BalanceAdjustmentRequest.ValidateAll() if the designated
// constraints aren't met.
type BalanceAdjustmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BalanceAdjustmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BalanceAdjustmentRequestMultiError) AllErrors() []error { return m }

// BalanceAdjustmentRequestValidationError is the validation error returned by
// BalanceAdjustmentRequest.Validate if the designated constraints aren't met.
type BalanceAdjustmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BalanceAdjustmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BalanceAdjustmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BalanceAdjustmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BalanceAdjustmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BalanceAdjustmentRequestValidationError) ErrorName() string {
	return "BalanceAdjustmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BalanceAdjustmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBalanceAdjustmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BalanceAdjustmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BalanceAdjustmentRequestValidationError{}

// Validate checks the field values on AllowedBalanceAdjustmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllowedBalanceAdjustmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllowedBalanceAdjustmentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AllowedBalanceAdjustmentRequestMultiError, or nil if none found.
func (m *AllowedBalanceAdjustmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllowedBalanceAdjustmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetToken()); l < 1 || l > 20 {
		err := AllowedBalanceAdjustmentRequestValidationError{
			field:  "Token",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAddress() == nil {
		err := AllowedBalanceAdjustmentRequestValidationError{
			field:  "Address",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AllowedBalanceAdjustmentRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AllowedBalanceAdjustmentRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AllowedBalanceAdjustmentRequestValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAmount() == nil {
		err := AllowedBalanceAdjustmentRequestValidationError{
			field:  "Amount",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AllowedBalanceAdjustmentRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AllowedBalanceAdjustmentRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AllowedBalanceAdjustmentRequestValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetReason()); l < 1 || l > 200 {
		err := AllowedBalanceAdjustmentRequestValidationError{
			field:  "Reason",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AllowedBalanceAdjustmentRequestMultiError(errors)
	}

	return nil
}

// AllowedBalanceAdjustmentRequestMultiError is an error wrapping multiple
// validation errors returned by AllowedBalanceAdjustmentRequest.ValidateAll()
// if the designated constraints aren't met.
type AllowedBalanceAdjustmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllowedBalanceAdjustmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllowedBalanceAdjustmentRequestMultiError) AllErrors() []error { return m }

// AllowedBalanceAdjustmentRequestValidationError is the validation error
// returned by AllowedBalanceAdjustmentRequest.Validate if the designated
// constraints aren't met.
type AllowedBalanceAdjustmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllowedBalanceAdjustmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllowedBalanceAdjustmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllowedBalanceAdjustmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllowedBalanceAdjustmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllowedBalanceAdjustmentRequestValidationError) ErrorName() string {
	return "AllowedBalanceAdjustmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AllowedBalanceAdjustmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllowedBalanceAdjustmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllowedBalanceAdjustmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllowedBalanceAdjustmentRequestValidationError{}

// Validate checks the field values on AllowedBalanceUnlockRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllowedBalanceUnlockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllowedBalanceUnlockRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllowedBalanceUnlockRequestMultiError, or nil if none found.
func (m *AllowedBalanceUnlockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllowedBalanceUnlockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetToken()); l < 1 || l > 20 {
		err := AllowedBalanceUnlockRequestValidationError{
			field:  "Token",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAddress() == nil {
		err := AllowedBalanceUnlockRequestValidationError{
			field:  "Address",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AllowedBalanceUnlockRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AllowedBalanceUnlockRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AllowedBalanceUnlockRequestValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAmount() == nil {
		err := AllowedBalanceUnlockRequestValidationError{
			field:  "Amount",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AllowedBalanceUnlockRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AllowedBalanceUnlockRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AllowedBalanceUnlockRequestValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AllowedBalanceUnlockRequestMultiError(errors)
	}

	return nil
}

// AllowedBalanceUnlockRequestMultiError is an error wrapping multiple
// validation errors returned by AllowedBalanceUnlockRequest.ValidateAll() if
// the designated constraints aren't met.
type AllowedBalanceUnlockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllowedBalanceUnlockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllowedBalanceUnlockRequestMultiError) AllErrors() []error { return m }

// AllowedBalanceUnlockRequestValidationError is the validation error returned
// by AllowedBalanceUnlockRequest.Validate if the designated constraints
// aren't met.
type AllowedBalanceUnlockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllowedBalanceUnlockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllowedBalanceUnlockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllowedBalanceUnlockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllowedBalanceUnlockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllowedBalanceUnlockRequestValidationError) ErrorName() string {
	return "AllowedBalanceUnlockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AllowedBalanceUnlockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllowedBalanceUnlockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllowedBalanceUnlockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllowedBalanceUnlockRequestValidationError{}
