syntax = "proto3";

package foundation;

option go_package = "gitlab.n-t.io/atm-ru/onchain/foundation-token/service";

import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "method_options.proto"; // Import custom options.

// Address represents a blockchain address.
message Address {
    string address = 1 [(validate.rules).string = {pattern: "^[1-9A-HJ-NP-Za-km-z]+$"}];
}

// BigInt represents a large integer.
message BigInt {
    string value = 1 [(validate.rules).string = {pattern: "^[0-9]+$"}]; // Value must be a number.
}

// Balance represents a balance with a suffix and value.
message Balance {
    string suffix = 1;
    string value  = 2 [(validate.rules).string = {pattern: "^[0-9]+$"}];
}

// Requests and responses for methods.

message BalanceRequest {
    Address address = 1 [(validate.rules).message.required = true];
    string  suffix  = 2 [(validate.rules).string = {min_len: 1, max_len: 20}];
}

message BalanceResponse {
    string balance = 1 [(validate.rules).string = {pattern: "^[0-9]+$"}];
}

message AllBalancesRequest {
    Address address = 1 [(validate.rules).message.required = true];
}

message AllBalancesResponse {
    repeated Balance balances = 1;
}

message AllowedBalanceRequest {
    Address address = 1 [(validate.rules).message.required = true];
    string  token   = 2 [(validate.rules).string = {min_len: 1, max_len: 20}];
}

message AllowedBalanceResponse {
    string balance = 1 [(validate.rules).string = {pattern: "^[0-9]+$"}];
}

message BalanceAdjustmentRequest {
    string suffix   = 1 [(validate.rules).string = {min_len: 1, max_len: 20}];
    Address address = 2 [(validate.rules).message.required = true];
    BigInt amount   = 3 [(validate.rules).message.required = true];
    string reason   = 4 [(validate.rules).string = {min_len: 1, max_len: 200}];
}

message AllowedBalanceAdjustmentRequest {
    string token    = 1 [(validate.rules).string = {min_len: 1, max_len: 20}];
    Address address = 2 [(validate.rules).message.required = true];
    BigInt amount   = 3 [(validate.rules).message.required = true];
    string reason   = 4 [(validate.rules).string = {min_len: 1, max_len: 200}];
}

message AllowedBalanceUnlockRequest {
    string token    = 1 [(validate.rules).string = {min_len: 1, max_len: 20}];
    Address address = 2 [(validate.rules).message.required = true];
    BigInt amount   = 3 [(validate.rules).message.required = true];
}

// BalanceService defines the balance service.
service BalanceService {
    rpc Balance(BalanceRequest) returns (BalanceResponse) {
        option (foundation.method_type) = METHOD_TYPE_QUERY;
    }
    rpc AllBalances(AllBalancesRequest) returns (AllBalancesResponse) {
        option (foundation.method_type) = METHOD_TYPE_QUERY;
    }
    rpc AllowedBalance(AllowedBalanceRequest) returns (AllowedBalanceResponse) {
        option (foundation.method_type) = METHOD_TYPE_QUERY;
    }
    
    rpc AddBalanceByAdmin(BalanceAdjustmentRequest) returns (google.protobuf.Empty) {
        option (foundation.method_type) = METHOD_TYPE_TRANSACTION;
    }
    rpc SubtractBalanceByAdmin(BalanceAdjustmentRequest) returns (google.protobuf.Empty) {
        option (foundation.method_type) = METHOD_TYPE_TRANSACTION;
    }
    rpc AddAllowedBalanceByAdmin(AllowedBalanceAdjustmentRequest) returns (google.protobuf.Empty) {
        option (foundation.method_type) = METHOD_TYPE_TRANSACTION;
    }
    rpc SubtractAllowedBalanceByAdmin(AllowedBalanceAdjustmentRequest) returns (google.protobuf.Empty) {
        option (foundation.method_type) = METHOD_TYPE_TRANSACTION;
    }
    rpc UnlockAllowedBalanceByAdmin(AllowedBalanceUnlockRequest) returns (google.protobuf.Empty) {
        option (foundation.method_type) = METHOD_TYPE_TRANSACTION;
    }
}
