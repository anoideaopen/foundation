// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: batch.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KeyType int32

const (
	KeyType_ed25519   KeyType = 0
	KeyType_secp256k1 KeyType = 1
	KeyType_gost      KeyType = 2
)

// Enum value maps for KeyType.
var (
	KeyType_name = map[int32]string{
		0: "ed25519",
		1: "secp256k1",
		2: "gost",
	}
	KeyType_value = map[string]int32{
		"ed25519":   0,
		"secp256k1": 1,
		"gost":      2,
	}
)

func (x KeyType) Enum() *KeyType {
	p := new(KeyType)
	*p = x
	return p
}

func (x KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_batch_proto_enumTypes[0].Descriptor()
}

func (KeyType) Type() protoreflect.EnumType {
	return &file_batch_proto_enumTypes[0]
}

func (x KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType.Descriptor instead.
func (KeyType) EnumDescriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{0}
}

type MultiSwap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator       []byte                 `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Owner         []byte                 `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Token         string                 `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	From          string                 `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	To            string                 `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	Hash          []byte                 `protobuf:"bytes,7,opt,name=hash,proto3" json:"hash,omitempty"`
	Timeout       int64                  `protobuf:"varint,8,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Assets        []*Asset               `protobuf:"bytes,9,rep,name=assets,proto3" json:"assets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultiSwap) Reset() {
	*x = MultiSwap{}
	mi := &file_batch_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiSwap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSwap) ProtoMessage() {}

func (x *MultiSwap) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSwap.ProtoReflect.Descriptor instead.
func (*MultiSwap) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{0}
}

func (x *MultiSwap) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MultiSwap) GetCreator() []byte {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *MultiSwap) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *MultiSwap) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *MultiSwap) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *MultiSwap) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *MultiSwap) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *MultiSwap) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *MultiSwap) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type Asset struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         string                 `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Amount        []byte                 `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Asset) Reset() {
	*x = Asset{}
	mi := &file_batch_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{1}
}

func (x *Asset) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Asset) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

type Swap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator       []byte                 `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Owner         []byte                 `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Token         string                 `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Amount        []byte                 `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	From          string                 `protobuf:"bytes,6,opt,name=from,proto3" json:"from,omitempty"`
	To            string                 `protobuf:"bytes,7,opt,name=to,proto3" json:"to,omitempty"`
	Hash          []byte                 `protobuf:"bytes,8,opt,name=hash,proto3" json:"hash,omitempty"`
	Timeout       int64                  `protobuf:"varint,9,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Swap) Reset() {
	*x = Swap{}
	mi := &file_batch_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Swap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Swap) ProtoMessage() {}

func (x *Swap) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Swap.ProtoReflect.Descriptor instead.
func (*Swap) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{2}
}

func (x *Swap) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Swap) GetCreator() []byte {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *Swap) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Swap) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Swap) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Swap) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Swap) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Swap) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Swap) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type SwapKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    []byte                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Key   string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*SwapKey_Swap
	//	*SwapKey_MultiSwap
	Payload       isSwapKey_Payload `protobuf_oneof:"Payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwapKey) Reset() {
	*x = SwapKey{}
	mi := &file_batch_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwapKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapKey) ProtoMessage() {}

func (x *SwapKey) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapKey.ProtoReflect.Descriptor instead.
func (*SwapKey) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{3}
}

func (x *SwapKey) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SwapKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SwapKey) GetPayload() isSwapKey_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SwapKey) GetSwap() *Swap {
	if x != nil {
		if x, ok := x.Payload.(*SwapKey_Swap); ok {
			return x.Swap
		}
	}
	return nil
}

func (x *SwapKey) GetMultiSwap() *MultiSwap {
	if x != nil {
		if x, ok := x.Payload.(*SwapKey_MultiSwap); ok {
			return x.MultiSwap
		}
	}
	return nil
}

type isSwapKey_Payload interface {
	isSwapKey_Payload()
}

type SwapKey_Swap struct {
	Swap *Swap `protobuf:"bytes,3,opt,name=swap,proto3,oneof"`
}

type SwapKey_MultiSwap struct {
	MultiSwap *MultiSwap `protobuf:"bytes,4,opt,name=multiSwap,proto3,oneof"`
}

func (*SwapKey_Swap) isSwapKey_Payload() {}

func (*SwapKey_MultiSwap) isSwapKey_Payload() {}

type Batch struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TxIDs          [][]byte               `protobuf:"bytes,1,rep,name=txIDs,proto3" json:"txIDs,omitempty"`
	Swaps          []*Swap                `protobuf:"bytes,2,rep,name=swaps,proto3" json:"swaps,omitempty"`
	Keys           []*SwapKey             `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys,omitempty"`
	MultiSwapsKeys []*SwapKey             `protobuf:"bytes,4,rep,name=multi_swaps_keys,json=multiSwapsKeys,proto3" json:"multi_swaps_keys,omitempty"`
	MultiSwaps     []*MultiSwap           `protobuf:"bytes,5,rep,name=multi_swaps,json=multiSwaps,proto3" json:"multi_swaps,omitempty"`
	Pendings       []*PendingTx           `protobuf:"bytes,6,rep,name=pendings,proto3" json:"pendings,omitempty"` // payload for field txIDs
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Batch) Reset() {
	*x = Batch{}
	mi := &file_batch_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{4}
}

func (x *Batch) GetTxIDs() [][]byte {
	if x != nil {
		return x.TxIDs
	}
	return nil
}

func (x *Batch) GetSwaps() []*Swap {
	if x != nil {
		return x.Swaps
	}
	return nil
}

func (x *Batch) GetKeys() []*SwapKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Batch) GetMultiSwapsKeys() []*SwapKey {
	if x != nil {
		return x.MultiSwapsKeys
	}
	return nil
}

func (x *Batch) GetMultiSwaps() []*MultiSwap {
	if x != nil {
		return x.MultiSwaps
	}
	return nil
}

func (x *Batch) GetPendings() []*PendingTx {
	if x != nil {
		return x.Pendings
	}
	return nil
}

type InitArgs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlatformSKI   []byte                 `protobuf:"bytes,1,opt,name=platformSKI,proto3" json:"platformSKI,omitempty"`
	RobotSKI      []byte                 `protobuf:"bytes,2,opt,name=robotSKI,proto3" json:"robotSKI,omitempty"`
	Args          []string               `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitArgs) Reset() {
	*x = InitArgs{}
	mi := &file_batch_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitArgs) ProtoMessage() {}

func (x *InitArgs) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitArgs.ProtoReflect.Descriptor instead.
func (*InitArgs) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{5}
}

func (x *InitArgs) GetPlatformSKI() []byte {
	if x != nil {
		return x.PlatformSKI
	}
	return nil
}

func (x *InitArgs) GetRobotSKI() []byte {
	if x != nil {
		return x.RobotSKI
	}
	return nil
}

func (x *InitArgs) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteElement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	IsDeleted     bool                   `protobuf:"varint,3,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteElement) Reset() {
	*x = WriteElement{}
	mi := &file_batch_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteElement) ProtoMessage() {}

func (x *WriteElement) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteElement.ProtoReflect.Descriptor instead.
func (*WriteElement) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{6}
}

func (x *WriteElement) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *WriteElement) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *WriteElement) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

type ResponseError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseError) Reset() {
	*x = ResponseError{}
	mi := &file_batch_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseError) ProtoMessage() {}

func (x *ResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseError.ProtoReflect.Descriptor instead.
func (*ResponseError) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{7}
}

func (x *ResponseError) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SwapResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Error         *ResponseError         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Writes        []*WriteElement        `protobuf:"bytes,3,rep,name=writes,proto3" json:"writes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwapResponse) Reset() {
	*x = SwapResponse{}
	mi := &file_batch_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapResponse) ProtoMessage() {}

func (x *SwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapResponse.ProtoReflect.Descriptor instead.
func (*SwapResponse) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{8}
}

func (x *SwapResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SwapResponse) GetError() *ResponseError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SwapResponse) GetWrites() []*WriteElement {
	if x != nil {
		return x.Writes
	}
	return nil
}

type AccountingRecord struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Token                string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Sender               []byte                 `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient            []byte                 `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount               []byte                 `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Reason               string                 `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	SenderBalanceType    int32                  `protobuf:"varint,6,opt,name=senderBalanceType,proto3" json:"senderBalanceType,omitempty"`
	RecipientBalanceType int32                  `protobuf:"varint,7,opt,name=recipientBalanceType,proto3" json:"recipientBalanceType,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *AccountingRecord) Reset() {
	*x = AccountingRecord{}
	mi := &file_batch_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountingRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountingRecord) ProtoMessage() {}

func (x *AccountingRecord) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountingRecord.ProtoReflect.Descriptor instead.
func (*AccountingRecord) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{9}
}

func (x *AccountingRecord) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AccountingRecord) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *AccountingRecord) GetRecipient() []byte {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *AccountingRecord) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *AccountingRecord) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AccountingRecord) GetSenderBalanceType() int32 {
	if x != nil {
		return x.SenderBalanceType
	}
	return 0
}

func (x *AccountingRecord) GetRecipientBalanceType() int32 {
	if x != nil {
		return x.RecipientBalanceType
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_batch_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{10}
}

func (x *Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Event) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type TxResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Method        string                 `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Error         *ResponseError         `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Writes        []*WriteElement        `protobuf:"bytes,4,rep,name=writes,proto3" json:"writes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxResponse) Reset() {
	*x = TxResponse{}
	mi := &file_batch_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxResponse) ProtoMessage() {}

func (x *TxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxResponse.ProtoReflect.Descriptor instead.
func (*TxResponse) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{11}
}

func (x *TxResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TxResponse) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *TxResponse) GetError() *ResponseError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TxResponse) GetWrites() []*WriteElement {
	if x != nil {
		return x.Writes
	}
	return nil
}

type BatchTxEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Method        string                 `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Error         *ResponseError         `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Result        []byte                 `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	Events        []*Event               `protobuf:"bytes,6,rep,name=events,proto3" json:"events,omitempty"`
	Accounting    []*AccountingRecord    `protobuf:"bytes,7,rep,name=accounting,proto3" json:"accounting,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchTxEvent) Reset() {
	*x = BatchTxEvent{}
	mi := &file_batch_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchTxEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchTxEvent) ProtoMessage() {}

func (x *BatchTxEvent) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchTxEvent.ProtoReflect.Descriptor instead.
func (*BatchTxEvent) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{12}
}

func (x *BatchTxEvent) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BatchTxEvent) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *BatchTxEvent) GetError() *ResponseError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *BatchTxEvent) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *BatchTxEvent) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *BatchTxEvent) GetAccounting() []*AccountingRecord {
	if x != nil {
		return x.Accounting
	}
	return nil
}

type BatchEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*BatchTxEvent        `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchEvent) Reset() {
	*x = BatchEvent{}
	mi := &file_batch_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchEvent) ProtoMessage() {}

func (x *BatchEvent) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchEvent.ProtoReflect.Descriptor instead.
func (*BatchEvent) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{13}
}

func (x *BatchEvent) GetEvents() []*BatchTxEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type BatchResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TxResponses      []*TxResponse          `protobuf:"bytes,1,rep,name=tx_responses,json=txResponses,proto3" json:"tx_responses,omitempty"`
	CreatedSwaps     []*Swap                `protobuf:"bytes,2,rep,name=created_swaps,json=createdSwaps,proto3" json:"created_swaps,omitempty"`
	SwapResponses    []*SwapResponse        `protobuf:"bytes,3,rep,name=swap_responses,json=swapResponses,proto3" json:"swap_responses,omitempty"`
	SwapKeyResponses []*SwapResponse        `protobuf:"bytes,4,rep,name=swap_key_responses,json=swapKeyResponses,proto3" json:"swap_key_responses,omitempty"`
	CreatedMultiSwap []*MultiSwap           `protobuf:"bytes,5,rep,name=created_multi_swap,json=createdMultiSwap,proto3" json:"created_multi_swap,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *BatchResponse) Reset() {
	*x = BatchResponse{}
	mi := &file_batch_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchResponse) ProtoMessage() {}

func (x *BatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchResponse.ProtoReflect.Descriptor instead.
func (*BatchResponse) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{14}
}

func (x *BatchResponse) GetTxResponses() []*TxResponse {
	if x != nil {
		return x.TxResponses
	}
	return nil
}

func (x *BatchResponse) GetCreatedSwaps() []*Swap {
	if x != nil {
		return x.CreatedSwaps
	}
	return nil
}

func (x *BatchResponse) GetSwapResponses() []*SwapResponse {
	if x != nil {
		return x.SwapResponses
	}
	return nil
}

func (x *BatchResponse) GetSwapKeyResponses() []*SwapResponse {
	if x != nil {
		return x.SwapKeyResponses
	}
	return nil
}

func (x *BatchResponse) GetCreatedMultiSwap() []*MultiSwap {
	if x != nil {
		return x.CreatedMultiSwap
	}
	return nil
}

type Nested struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Args          []string               `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Nested) Reset() {
	*x = Nested{}
	mi := &file_batch_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nested) ProtoMessage() {}

func (x *Nested) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nested.ProtoReflect.Descriptor instead.
func (*Nested) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{15}
}

func (x *Nested) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type TokenFee struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Currency      string                 `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Fee           []byte                 `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
	Floor         []byte                 `protobuf:"bytes,3,opt,name=floor,proto3" json:"floor,omitempty"`
	Cap           []byte                 `protobuf:"bytes,4,opt,name=cap,proto3" json:"cap,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenFee) Reset() {
	*x = TokenFee{}
	mi := &file_batch_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenFee) ProtoMessage() {}

func (x *TokenFee) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenFee.ProtoReflect.Descriptor instead.
func (*TokenFee) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{16}
}

func (x *TokenFee) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TokenFee) GetFee() []byte {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *TokenFee) GetFloor() []byte {
	if x != nil {
		return x.Floor
	}
	return nil
}

func (x *TokenFee) GetCap() []byte {
	if x != nil {
		return x.Cap
	}
	return nil
}

type TokenRate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DealType      string                 `protobuf:"bytes,1,opt,name=deal_type,json=dealType,proto3" json:"deal_type,omitempty"`
	Currency      string                 `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Rate          []byte                 `protobuf:"bytes,3,opt,name=rate,proto3" json:"rate,omitempty"`
	Min           []byte                 `protobuf:"bytes,4,opt,name=min,proto3" json:"min,omitempty"`
	Max           []byte                 `protobuf:"bytes,5,opt,name=max,proto3" json:"max,omitempty"`
	Issuer        *Address               `protobuf:"bytes,6,opt,name=issuer,proto3" json:"issuer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenRate) Reset() {
	*x = TokenRate{}
	mi := &file_batch_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenRate) ProtoMessage() {}

func (x *TokenRate) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenRate.ProtoReflect.Descriptor instead.
func (*TokenRate) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{17}
}

func (x *TokenRate) GetDealType() string {
	if x != nil {
		return x.DealType
	}
	return ""
}

func (x *TokenRate) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TokenRate) GetRate() []byte {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *TokenRate) GetMin() []byte {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *TokenRate) GetMax() []byte {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *TokenRate) GetIssuer() *Address {
	if x != nil {
		return x.Issuer
	}
	return nil
}

type Token struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalEmission []byte                 `protobuf:"bytes,1,opt,name=total_emission,json=totalEmission,proto3" json:"total_emission,omitempty"`
	Fee           *TokenFee              `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
	Rates         []*TokenRate           `protobuf:"bytes,3,rep,name=rates,proto3" json:"rates,omitempty"`
	FeeAddress    []byte                 `protobuf:"bytes,4,opt,name=fee_address,json=feeAddress,proto3" json:"fee_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Token) Reset() {
	*x = Token{}
	mi := &file_batch_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{18}
}

func (x *Token) GetTotalEmission() []byte {
	if x != nil {
		return x.TotalEmission
	}
	return nil
}

func (x *Token) GetFee() *TokenFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *Token) GetRates() []*TokenRate {
	if x != nil {
		return x.Rates
	}
	return nil
}

func (x *Token) GetFeeAddress() []byte {
	if x != nil {
		return x.FeeAddress
	}
	return nil
}

type HaveRight struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HaveRight     bool                   `protobuf:"varint,1,opt,name=haveRight,proto3" json:"haveRight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HaveRight) Reset() {
	*x = HaveRight{}
	mi := &file_batch_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HaveRight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HaveRight) ProtoMessage() {}

func (x *HaveRight) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HaveRight.ProtoReflect.Descriptor instead.
func (*HaveRight) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{19}
}

func (x *HaveRight) GetHaveRight() bool {
	if x != nil {
		return x.HaveRight
	}
	return false
}

type Right struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelName   string                 `protobuf:"bytes,1,opt,name=channelName,proto3" json:"channelName,omitempty"`
	ChaincodeName string                 `protobuf:"bytes,2,opt,name=chaincodeName,proto3" json:"chaincodeName,omitempty"`
	RoleName      string                 `protobuf:"bytes,3,opt,name=roleName,proto3" json:"roleName,omitempty"`
	OperationName string                 `protobuf:"bytes,4,opt,name=operationName,proto3" json:"operationName,omitempty"`
	Address       *Address               `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	HaveRight     *HaveRight             `protobuf:"bytes,6,opt,name=haveRight,proto3" json:"haveRight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Right) Reset() {
	*x = Right{}
	mi := &file_batch_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Right) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Right) ProtoMessage() {}

func (x *Right) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Right.ProtoReflect.Descriptor instead.
func (*Right) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{20}
}

func (x *Right) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *Right) GetChaincodeName() string {
	if x != nil {
		return x.ChaincodeName
	}
	return ""
}

func (x *Right) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *Right) GetOperationName() string {
	if x != nil {
		return x.OperationName
	}
	return ""
}

func (x *Right) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Right) GetHaveRight() *HaveRight {
	if x != nil {
		return x.HaveRight
	}
	return nil
}

type AccountRights struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       *Address               `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Rights        []*Right               `protobuf:"bytes,2,rep,name=rights,proto3" json:"rights,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountRights) Reset() {
	*x = AccountRights{}
	mi := &file_batch_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRights) ProtoMessage() {}

func (x *AccountRights) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRights.ProtoReflect.Descriptor instead.
func (*AccountRights) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{21}
}

func (x *AccountRights) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AccountRights) GetRights() []*Right {
	if x != nil {
		return x.Rights
	}
	return nil
}

type Accounts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addresses     []*Address             `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Accounts) Reset() {
	*x = Accounts{}
	mi := &file_batch_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Accounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Accounts) ProtoMessage() {}

func (x *Accounts) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Accounts.ProtoReflect.Descriptor instead.
func (*Accounts) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{22}
}

func (x *Accounts) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type Operations struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Operations    []string               `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Operations) Reset() {
	*x = Operations{}
	mi := &file_batch_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Operations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operations) ProtoMessage() {}

func (x *Operations) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operations.ProtoReflect.Descriptor instead.
func (*Operations) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{23}
}

func (x *Operations) GetOperations() []string {
	if x != nil {
		return x.Operations
	}
	return nil
}

type OperationRights struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OperationName string                 `protobuf:"bytes,1,opt,name=operationName,proto3" json:"operationName,omitempty"`
	Rights        []*Right               `protobuf:"bytes,2,rep,name=rights,proto3" json:"rights,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationRights) Reset() {
	*x = OperationRights{}
	mi := &file_batch_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationRights) ProtoMessage() {}

func (x *OperationRights) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationRights.ProtoReflect.Descriptor instead.
func (*OperationRights) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{24}
}

func (x *OperationRights) GetOperationName() string {
	if x != nil {
		return x.OperationName
	}
	return ""
}

func (x *OperationRights) GetRights() []*Right {
	if x != nil {
		return x.Rights
	}
	return nil
}

type Industrial struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Groups        []*IndustrialGroup     `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	Fee           *TokenFee              `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
	Rates         []*TokenRate           `protobuf:"bytes,3,rep,name=rates,proto3" json:"rates,omitempty"`
	FeeAddress    []byte                 `protobuf:"bytes,4,opt,name=fee_address,json=feeAddress,proto3" json:"fee_address,omitempty"`
	Initialized   bool                   `protobuf:"varint,5,opt,name=initialized,proto3" json:"initialized,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Industrial) Reset() {
	*x = Industrial{}
	mi := &file_batch_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Industrial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Industrial) ProtoMessage() {}

func (x *Industrial) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Industrial.ProtoReflect.Descriptor instead.
func (*Industrial) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{25}
}

func (x *Industrial) GetGroups() []*IndustrialGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Industrial) GetFee() *TokenFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *Industrial) GetRates() []*TokenRate {
	if x != nil {
		return x.Rates
	}
	return nil
}

func (x *Industrial) GetFeeAddress() []byte {
	if x != nil {
		return x.FeeAddress
	}
	return nil
}

func (x *Industrial) GetInitialized() bool {
	if x != nil {
		return x.Initialized
	}
	return false
}

type IndustrialGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Emission      []byte                 `protobuf:"bytes,2,opt,name=emission,proto3" json:"emission,omitempty"`
	Maturity      int64                  `protobuf:"varint,3,opt,name=maturity,proto3" json:"maturity,omitempty"`
	Note          string                 `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndustrialGroup) Reset() {
	*x = IndustrialGroup{}
	mi := &file_batch_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndustrialGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndustrialGroup) ProtoMessage() {}

func (x *IndustrialGroup) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndustrialGroup.ProtoReflect.Descriptor instead.
func (*IndustrialGroup) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{26}
}

func (x *IndustrialGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IndustrialGroup) GetEmission() []byte {
	if x != nil {
		return x.Emission
	}
	return nil
}

func (x *IndustrialGroup) GetMaturity() int64 {
	if x != nil {
		return x.Maturity
	}
	return 0
}

func (x *IndustrialGroup) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type AccountInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KycHash       string                 `protobuf:"bytes,1,opt,name=kycHash,proto3" json:"kycHash,omitempty"`
	GrayListed    bool                   `protobuf:"varint,2,opt,name=grayListed,proto3" json:"grayListed,omitempty"`
	BlackListed   bool                   `protobuf:"varint,3,opt,name=blackListed,proto3" json:"blackListed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountInfo) Reset() {
	*x = AccountInfo{}
	mi := &file_batch_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfo) ProtoMessage() {}

func (x *AccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfo.ProtoReflect.Descriptor instead.
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{27}
}

func (x *AccountInfo) GetKycHash() string {
	if x != nil {
		return x.KycHash
	}
	return ""
}

func (x *AccountInfo) GetGrayListed() bool {
	if x != nil {
		return x.GrayListed
	}
	return false
}

func (x *AccountInfo) GetBlackListed() bool {
	if x != nil {
		return x.BlackListed
	}
	return false
}

type Address struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Address       []byte                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	IsIndustrial  bool                   `protobuf:"varint,3,opt,name=isIndustrial,proto3" json:"isIndustrial,omitempty"`
	IsMultisig    bool                   `protobuf:"varint,4,opt,name=isMultisig,proto3" json:"isMultisig,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Address) Reset() {
	*x = Address{}
	mi := &file_batch_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{28}
}

func (x *Address) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Address) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Address) GetIsIndustrial() bool {
	if x != nil {
		return x.IsIndustrial
	}
	return false
}

func (x *Address) GetIsMultisig() bool {
	if x != nil {
		return x.IsMultisig
	}
	return false
}

type AdditionalKey struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PublicKeyBase58 string                 `protobuf:"bytes,1,opt,name=publicKeyBase58,proto3" json:"publicKeyBase58,omitempty"`
	Labels          []string               `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AdditionalKey) Reset() {
	*x = AdditionalKey{}
	mi := &file_batch_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdditionalKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalKey) ProtoMessage() {}

func (x *AdditionalKey) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalKey.ProtoReflect.Descriptor instead.
func (*AdditionalKey) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{29}
}

func (x *AdditionalKey) GetPublicKeyBase58() string {
	if x != nil {
		return x.PublicKeyBase58
	}
	return ""
}

func (x *AdditionalKey) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type SignedAddress struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Address         *Address               `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SignedTx        []string               `protobuf:"bytes,2,rep,name=signedTx,proto3" json:"signedTx,omitempty"`
	SignaturePolicy *SignaturePolicy       `protobuf:"bytes,5,opt,name=signaturePolicy,proto3" json:"signaturePolicy,omitempty"`
	Reason          string                 `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	ReasonId        int32                  `protobuf:"varint,7,opt,name=reasonId,proto3" json:"reasonId,omitempty"`
	AdditionalKeys  []*AdditionalKey       `protobuf:"bytes,8,rep,name=additionalKeys,proto3" json:"additionalKeys,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SignedAddress) Reset() {
	*x = SignedAddress{}
	mi := &file_batch_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedAddress) ProtoMessage() {}

func (x *SignedAddress) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedAddress.ProtoReflect.Descriptor instead.
func (*SignedAddress) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{30}
}

func (x *SignedAddress) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *SignedAddress) GetSignedTx() []string {
	if x != nil {
		return x.SignedTx
	}
	return nil
}

func (x *SignedAddress) GetSignaturePolicy() *SignaturePolicy {
	if x != nil {
		return x.SignaturePolicy
	}
	return nil
}

func (x *SignedAddress) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *SignedAddress) GetReasonId() int32 {
	if x != nil {
		return x.ReasonId
	}
	return 0
}

func (x *SignedAddress) GetAdditionalKeys() []*AdditionalKey {
	if x != nil {
		return x.AdditionalKeys
	}
	return nil
}

type SignaturePolicy struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	N                   uint32                 `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
	PubKeys             [][]byte               `protobuf:"bytes,3,rep,name=pubKeys,proto3" json:"pubKeys,omitempty"`
	ReplaceKeysSignedTx []string               `protobuf:"bytes,4,rep,name=replaceKeysSignedTx,proto3" json:"replaceKeysSignedTx,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SignaturePolicy) Reset() {
	*x = SignaturePolicy{}
	mi := &file_batch_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignaturePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignaturePolicy) ProtoMessage() {}

func (x *SignaturePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignaturePolicy.ProtoReflect.Descriptor instead.
func (*SignaturePolicy) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{31}
}

func (x *SignaturePolicy) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *SignaturePolicy) GetPubKeys() [][]byte {
	if x != nil {
		return x.PubKeys
	}
	return nil
}

func (x *SignaturePolicy) GetReplaceKeysSignedTx() []string {
	if x != nil {
		return x.ReplaceKeysSignedTx
	}
	return nil
}

type AclResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       *AccountInfo           `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Address       *SignedAddress         `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	KeyTypes      []KeyType              `protobuf:"varint,3,rep,packed,name=keyTypes,proto3,enum=proto.KeyType" json:"keyTypes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AclResponse) Reset() {
	*x = AclResponse{}
	mi := &file_batch_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AclResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclResponse) ProtoMessage() {}

func (x *AclResponse) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclResponse.ProtoReflect.Descriptor instead.
func (*AclResponse) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{32}
}

func (x *AclResponse) GetAccount() *AccountInfo {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *AclResponse) GetAddress() *SignedAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AclResponse) GetKeyTypes() []KeyType {
	if x != nil {
		return x.KeyTypes
	}
	return nil
}

type Nonce struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nonce         []uint64               `protobuf:"varint,1,rep,packed,name=nonce,proto3" json:"nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Nonce) Reset() {
	*x = Nonce{}
	mi := &file_batch_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Nonce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nonce) ProtoMessage() {}

func (x *Nonce) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nonce.ProtoReflect.Descriptor instead.
func (*Nonce) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{33}
}

func (x *Nonce) GetNonce() []uint64 {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type PendingTx struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Method string                 `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Sender *Address               `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Args   []string               `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	// bytes ______________ = 4; the field has been deleted, avoid reusing it
	Timestamp     int64   `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Nonce         uint64  `protobuf:"varint,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Pairs         []*Pair `protobuf:"bytes,7,rep,name=pairs,proto3" json:"pairs,omitempty"` // key-value pairs for telemetry settings storage
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PendingTx) Reset() {
	*x = PendingTx{}
	mi := &file_batch_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PendingTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingTx) ProtoMessage() {}

func (x *PendingTx) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingTx.ProtoReflect.Descriptor instead.
func (*PendingTx) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{34}
}

func (x *PendingTx) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *PendingTx) GetSender() *Address {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *PendingTx) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *PendingTx) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PendingTx) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *PendingTx) GetPairs() []*Pair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

// key-value pairs for telemetry settings storage
type Pair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pair) Reset() {
	*x = Pair{}
	mi := &file_batch_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pair) ProtoMessage() {}

func (x *Pair) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pair.ProtoReflect.Descriptor instead.
func (*Pair) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{35}
}

func (x *Pair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Pair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type CCTransfer struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Id     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // unique transfer id
	From   string                 `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`     // channel from
	To     string                 `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`         // channel to
	Token  string                 `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`   // transfer token
	User   []byte                 `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`     // token holder
	Amount []byte                 `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"` // number of tokens
	// Transfer direction is an additional variable made for convenience
	// so that you don't have to calculate it every time. It is calculated 1 time when filling the structure
	// when executing a transaction.
	// Different balances change depending on the direction.
	// Examples:
	// Direct transfer: we transfer A tokens from channel A to channel B
	// or transfer B tokens from channel B to channel A
	// Reverse transfer:from channel A to channel B transfer tokens B
	// or from channel B to channel A transfer tokens A
	ForwardDirection bool              `protobuf:"varint,7,opt,name=forward_direction,json=forwardDirection,proto3" json:"forward_direction,omitempty"`
	IsCommit         bool              `protobuf:"varint,8,opt,name=isCommit,proto3" json:"isCommit,omitempty"`                            // phase 2 sign
	TimeAsNanos      int64             `protobuf:"varint,9,opt,name=time_as_nanos,json=timeAsNanos,proto3" json:"time_as_nanos,omitempty"` // transfer creation time in nanoseconds
	Items            []*CCTransferItem `protobuf:"bytes,10,rep,name=items,proto3" json:"items,omitempty"`                                  // transfer multiple tokens for single transfer
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CCTransfer) Reset() {
	*x = CCTransfer{}
	mi := &file_batch_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCTransfer) ProtoMessage() {}

func (x *CCTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCTransfer.ProtoReflect.Descriptor instead.
func (*CCTransfer) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{36}
}

func (x *CCTransfer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CCTransfer) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CCTransfer) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *CCTransfer) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CCTransfer) GetUser() []byte {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CCTransfer) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *CCTransfer) GetForwardDirection() bool {
	if x != nil {
		return x.ForwardDirection
	}
	return false
}

func (x *CCTransfer) GetIsCommit() bool {
	if x != nil {
		return x.IsCommit
	}
	return false
}

func (x *CCTransfer) GetTimeAsNanos() int64 {
	if x != nil {
		return x.TimeAsNanos
	}
	return 0
}

func (x *CCTransfer) GetItems() []*CCTransferItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type CCTransfers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bookmark      string                 `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	Ccts          []*CCTransfer          `protobuf:"bytes,2,rep,name=ccts,proto3" json:"ccts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCTransfers) Reset() {
	*x = CCTransfers{}
	mi := &file_batch_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCTransfers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCTransfers) ProtoMessage() {}

func (x *CCTransfers) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCTransfers.ProtoReflect.Descriptor instead.
func (*CCTransfers) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{37}
}

func (x *CCTransfers) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

func (x *CCTransfers) GetCcts() []*CCTransfer {
	if x != nil {
		return x.Ccts
	}
	return nil
}

type CCTransferItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Amount        []byte                 `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCTransferItem) Reset() {
	*x = CCTransferItem{}
	mi := &file_batch_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCTransferItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCTransferItem) ProtoMessage() {}

func (x *CCTransferItem) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCTransferItem.ProtoReflect.Descriptor instead.
func (*CCTransferItem) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{38}
}

func (x *CCTransferItem) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CCTransferItem) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

var File_batch_proto protoreflect.FileDescriptor

const file_batch_proto_rawDesc = "" +
	"\n" +
	"\vbatch.proto\x12\x05proto\"\xd9\x01\n" +
	"\tMultiSwap\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\fR\x02id\x12\x18\n" +
	"\acreator\x18\x02 \x01(\fR\acreator\x12\x14\n" +
	"\x05owner\x18\x03 \x01(\fR\x05owner\x12\x14\n" +
	"\x05token\x18\x04 \x01(\tR\x05token\x12\x12\n" +
	"\x04from\x18\x05 \x01(\tR\x04from\x12\x0e\n" +
	"\x02to\x18\x06 \x01(\tR\x02to\x12\x12\n" +
	"\x04hash\x18\a \x01(\fR\x04hash\x12\x18\n" +
	"\atimeout\x18\b \x01(\x03R\atimeout\x12$\n" +
	"\x06assets\x18\t \x03(\v2\f.proto.AssetR\x06assets\"5\n" +
	"\x05Asset\x12\x14\n" +
	"\x05group\x18\x01 \x01(\tR\x05group\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\fR\x06amount\"\xc6\x01\n" +
	"\x04Swap\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\fR\x02id\x12\x18\n" +
	"\acreator\x18\x02 \x01(\fR\acreator\x12\x14\n" +
	"\x05owner\x18\x03 \x01(\fR\x05owner\x12\x14\n" +
	"\x05token\x18\x04 \x01(\tR\x05token\x12\x16\n" +
	"\x06amount\x18\x05 \x01(\fR\x06amount\x12\x12\n" +
	"\x04from\x18\x06 \x01(\tR\x04from\x12\x0e\n" +
	"\x02to\x18\a \x01(\tR\x02to\x12\x12\n" +
	"\x04hash\x18\b \x01(\fR\x04hash\x12\x18\n" +
	"\atimeout\x18\t \x01(\x03R\atimeout\"\x8b\x01\n" +
	"\aSwapKey\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\fR\x02id\x12\x10\n" +
	"\x03key\x18\x02 \x01(\tR\x03key\x12!\n" +
	"\x04swap\x18\x03 \x01(\v2\v.proto.SwapH\x00R\x04swap\x120\n" +
	"\tmultiSwap\x18\x04 \x01(\v2\x10.proto.MultiSwapH\x00R\tmultiSwapB\t\n" +
	"\aPayload\"\xff\x01\n" +
	"\x05Batch\x12\x14\n" +
	"\x05txIDs\x18\x01 \x03(\fR\x05txIDs\x12!\n" +
	"\x05swaps\x18\x02 \x03(\v2\v.proto.SwapR\x05swaps\x12\"\n" +
	"\x04keys\x18\x03 \x03(\v2\x0e.proto.SwapKeyR\x04keys\x128\n" +
	"\x10multi_swaps_keys\x18\x04 \x03(\v2\x0e.proto.SwapKeyR\x0emultiSwapsKeys\x121\n" +
	"\vmulti_swaps\x18\x05 \x03(\v2\x10.proto.MultiSwapR\n" +
	"multiSwaps\x12,\n" +
	"\bpendings\x18\x06 \x03(\v2\x10.proto.PendingTxR\bpendings\"\\\n" +
	"\bInitArgs\x12 \n" +
	"\vplatformSKI\x18\x01 \x01(\fR\vplatformSKI\x12\x1a\n" +
	"\brobotSKI\x18\x02 \x01(\fR\brobotSKI\x12\x12\n" +
	"\x04args\x18\x03 \x03(\tR\x04args\"U\n" +
	"\fWriteElement\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value\x12\x1d\n" +
	"\n" +
	"is_deleted\x18\x03 \x01(\bR\tisDeleted\"9\n" +
	"\rResponseError\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"w\n" +
	"\fSwapResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\fR\x02id\x12*\n" +
	"\x05error\x18\x02 \x01(\v2\x14.proto.ResponseErrorR\x05error\x12+\n" +
	"\x06writes\x18\x03 \x03(\v2\x13.proto.WriteElementR\x06writes\"\xf0\x01\n" +
	"\x10AccountingRecord\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\x12\x16\n" +
	"\x06sender\x18\x02 \x01(\fR\x06sender\x12\x1c\n" +
	"\trecipient\x18\x03 \x01(\fR\trecipient\x12\x16\n" +
	"\x06amount\x18\x04 \x01(\fR\x06amount\x12\x16\n" +
	"\x06reason\x18\x05 \x01(\tR\x06reason\x12,\n" +
	"\x11senderBalanceType\x18\x06 \x01(\x05R\x11senderBalanceType\x122\n" +
	"\x14recipientBalanceType\x18\a \x01(\x05R\x14recipientBalanceType\"1\n" +
	"\x05Event\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value\"\x8d\x01\n" +
	"\n" +
	"TxResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\fR\x02id\x12\x16\n" +
	"\x06method\x18\x02 \x01(\tR\x06method\x12*\n" +
	"\x05error\x18\x03 \x01(\v2\x14.proto.ResponseErrorR\x05error\x12+\n" +
	"\x06writes\x18\x04 \x03(\v2\x13.proto.WriteElementR\x06writes\"\xd9\x01\n" +
	"\fBatchTxEvent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\fR\x02id\x12\x16\n" +
	"\x06method\x18\x02 \x01(\tR\x06method\x12*\n" +
	"\x05error\x18\x03 \x01(\v2\x14.proto.ResponseErrorR\x05error\x12\x16\n" +
	"\x06result\x18\x04 \x01(\fR\x06result\x12$\n" +
	"\x06events\x18\x06 \x03(\v2\f.proto.EventR\x06events\x127\n" +
	"\n" +
	"accounting\x18\a \x03(\v2\x17.proto.AccountingRecordR\n" +
	"accounting\"9\n" +
	"\n" +
	"BatchEvent\x12+\n" +
	"\x06events\x18\x01 \x03(\v2\x13.proto.BatchTxEventR\x06events\"\xb6\x02\n" +
	"\rBatchResponse\x124\n" +
	"\ftx_responses\x18\x01 \x03(\v2\x11.proto.TxResponseR\vtxResponses\x120\n" +
	"\rcreated_swaps\x18\x02 \x03(\v2\v.proto.SwapR\fcreatedSwaps\x12:\n" +
	"\x0eswap_responses\x18\x03 \x03(\v2\x13.proto.SwapResponseR\rswapResponses\x12A\n" +
	"\x12swap_key_responses\x18\x04 \x03(\v2\x13.proto.SwapResponseR\x10swapKeyResponses\x12>\n" +
	"\x12created_multi_swap\x18\x05 \x03(\v2\x10.proto.MultiSwapR\x10createdMultiSwap\"\x1c\n" +
	"\x06Nested\x12\x12\n" +
	"\x04args\x18\x01 \x03(\tR\x04args\"`\n" +
	"\bTokenFee\x12\x1a\n" +
	"\bcurrency\x18\x01 \x01(\tR\bcurrency\x12\x10\n" +
	"\x03fee\x18\x02 \x01(\fR\x03fee\x12\x14\n" +
	"\x05floor\x18\x03 \x01(\fR\x05floor\x12\x10\n" +
	"\x03cap\x18\x04 \x01(\fR\x03cap\"\xa4\x01\n" +
	"\tTokenRate\x12\x1b\n" +
	"\tdeal_type\x18\x01 \x01(\tR\bdealType\x12\x1a\n" +
	"\bcurrency\x18\x02 \x01(\tR\bcurrency\x12\x12\n" +
	"\x04rate\x18\x03 \x01(\fR\x04rate\x12\x10\n" +
	"\x03min\x18\x04 \x01(\fR\x03min\x12\x10\n" +
	"\x03max\x18\x05 \x01(\fR\x03max\x12&\n" +
	"\x06issuer\x18\x06 \x01(\v2\x0e.proto.AddressR\x06issuer\"\x9a\x01\n" +
	"\x05Token\x12%\n" +
	"\x0etotal_emission\x18\x01 \x01(\fR\rtotalEmission\x12!\n" +
	"\x03fee\x18\x02 \x01(\v2\x0f.proto.TokenFeeR\x03fee\x12&\n" +
	"\x05rates\x18\x03 \x03(\v2\x10.proto.TokenRateR\x05rates\x12\x1f\n" +
	"\vfee_address\x18\x04 \x01(\fR\n" +
	"feeAddress\")\n" +
	"\tHaveRight\x12\x1c\n" +
	"\thaveRight\x18\x01 \x01(\bR\thaveRight\"\xeb\x01\n" +
	"\x05Right\x12 \n" +
	"\vchannelName\x18\x01 \x01(\tR\vchannelName\x12$\n" +
	"\rchaincodeName\x18\x02 \x01(\tR\rchaincodeName\x12\x1a\n" +
	"\broleName\x18\x03 \x01(\tR\broleName\x12$\n" +
	"\roperationName\x18\x04 \x01(\tR\roperationName\x12(\n" +
	"\aaddress\x18\x05 \x01(\v2\x0e.proto.AddressR\aaddress\x12.\n" +
	"\thaveRight\x18\x06 \x01(\v2\x10.proto.HaveRightR\thaveRight\"_\n" +
	"\rAccountRights\x12(\n" +
	"\aaddress\x18\x01 \x01(\v2\x0e.proto.AddressR\aaddress\x12$\n" +
	"\x06rights\x18\x02 \x03(\v2\f.proto.RightR\x06rights\"8\n" +
	"\bAccounts\x12,\n" +
	"\taddresses\x18\x01 \x03(\v2\x0e.proto.AddressR\taddresses\",\n" +
	"\n" +
	"Operations\x12\x1e\n" +
	"\n" +
	"operations\x18\x01 \x03(\tR\n" +
	"operations\"]\n" +
	"\x0fOperationRights\x12$\n" +
	"\roperationName\x18\x01 \x01(\tR\roperationName\x12$\n" +
	"\x06rights\x18\x02 \x03(\v2\f.proto.RightR\x06rights\"\xca\x01\n" +
	"\n" +
	"Industrial\x12.\n" +
	"\x06groups\x18\x01 \x03(\v2\x16.proto.IndustrialGroupR\x06groups\x12!\n" +
	"\x03fee\x18\x02 \x01(\v2\x0f.proto.TokenFeeR\x03fee\x12&\n" +
	"\x05rates\x18\x03 \x03(\v2\x10.proto.TokenRateR\x05rates\x12\x1f\n" +
	"\vfee_address\x18\x04 \x01(\fR\n" +
	"feeAddress\x12 \n" +
	"\vinitialized\x18\x05 \x01(\bR\vinitialized\"m\n" +
	"\x0fIndustrialGroup\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bemission\x18\x02 \x01(\fR\bemission\x12\x1a\n" +
	"\bmaturity\x18\x03 \x01(\x03R\bmaturity\x12\x12\n" +
	"\x04note\x18\x04 \x01(\tR\x04note\"i\n" +
	"\vAccountInfo\x12\x18\n" +
	"\akycHash\x18\x01 \x01(\tR\akycHash\x12\x1e\n" +
	"\n" +
	"grayListed\x18\x02 \x01(\bR\n" +
	"grayListed\x12 \n" +
	"\vblackListed\x18\x03 \x01(\bR\vblackListed\"\x7f\n" +
	"\aAddress\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\tR\x06userID\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\fR\aaddress\x12\"\n" +
	"\fisIndustrial\x18\x03 \x01(\bR\fisIndustrial\x12\x1e\n" +
	"\n" +
	"isMultisig\x18\x04 \x01(\bR\n" +
	"isMultisig\"Q\n" +
	"\rAdditionalKey\x12(\n" +
	"\x0fpublicKeyBase58\x18\x01 \x01(\tR\x0fpublicKeyBase58\x12\x16\n" +
	"\x06labels\x18\x02 \x03(\tR\x06labels\"\x89\x02\n" +
	"\rSignedAddress\x12(\n" +
	"\aaddress\x18\x01 \x01(\v2\x0e.proto.AddressR\aaddress\x12\x1a\n" +
	"\bsignedTx\x18\x02 \x03(\tR\bsignedTx\x12@\n" +
	"\x0fsignaturePolicy\x18\x05 \x01(\v2\x16.proto.SignaturePolicyR\x0fsignaturePolicy\x12\x16\n" +
	"\x06reason\x18\x06 \x01(\tR\x06reason\x12\x1a\n" +
	"\breasonId\x18\a \x01(\x05R\breasonId\x12<\n" +
	"\x0eadditionalKeys\x18\b \x03(\v2\x14.proto.AdditionalKeyR\x0eadditionalKeys\"k\n" +
	"\x0fSignaturePolicy\x12\f\n" +
	"\x01n\x18\x01 \x01(\rR\x01n\x12\x18\n" +
	"\apubKeys\x18\x03 \x03(\fR\apubKeys\x120\n" +
	"\x13replaceKeysSignedTx\x18\x04 \x03(\tR\x13replaceKeysSignedTx\"\x97\x01\n" +
	"\vAclResponse\x12,\n" +
	"\aaccount\x18\x01 \x01(\v2\x12.proto.AccountInfoR\aaccount\x12.\n" +
	"\aaddress\x18\x02 \x01(\v2\x14.proto.SignedAddressR\aaddress\x12*\n" +
	"\bkeyTypes\x18\x03 \x03(\x0e2\x0e.proto.KeyTypeR\bkeyTypes\"\x1d\n" +
	"\x05Nonce\x12\x14\n" +
	"\x05nonce\x18\x01 \x03(\x04R\x05nonce\"\xb6\x01\n" +
	"\tPendingTx\x12\x16\n" +
	"\x06method\x18\x01 \x01(\tR\x06method\x12&\n" +
	"\x06sender\x18\x02 \x01(\v2\x0e.proto.AddressR\x06sender\x12\x12\n" +
	"\x04args\x18\x03 \x03(\tR\x04args\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x03R\ttimestamp\x12\x14\n" +
	"\x05nonce\x18\x06 \x01(\x04R\x05nonce\x12!\n" +
	"\x05pairs\x18\a \x03(\v2\v.proto.pairR\x05pairs\".\n" +
	"\x04pair\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"\x9c\x02\n" +
	"\n" +
	"CCTransfer\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04from\x18\x02 \x01(\tR\x04from\x12\x0e\n" +
	"\x02to\x18\x03 \x01(\tR\x02to\x12\x14\n" +
	"\x05token\x18\x04 \x01(\tR\x05token\x12\x12\n" +
	"\x04user\x18\x05 \x01(\fR\x04user\x12\x16\n" +
	"\x06amount\x18\x06 \x01(\fR\x06amount\x12+\n" +
	"\x11forward_direction\x18\a \x01(\bR\x10forwardDirection\x12\x1a\n" +
	"\bisCommit\x18\b \x01(\bR\bisCommit\x12\"\n" +
	"\rtime_as_nanos\x18\t \x01(\x03R\vtimeAsNanos\x12+\n" +
	"\x05items\x18\n" +
	" \x03(\v2\x15.proto.CCTransferItemR\x05items\"P\n" +
	"\vCCTransfers\x12\x1a\n" +
	"\bbookmark\x18\x01 \x01(\tR\bbookmark\x12%\n" +
	"\x04ccts\x18\x02 \x03(\v2\x11.proto.CCTransferR\x04ccts\">\n" +
	"\x0eCCTransferItem\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\fR\x06amount*/\n" +
	"\aKeyType\x12\v\n" +
	"\aed25519\x10\x00\x12\r\n" +
	"\tsecp256k1\x10\x01\x12\b\n" +
	"\x04gost\x10\x02B)Z'github.com/anoideaopen/foundation/protob\x06proto3"

var (
	file_batch_proto_rawDescOnce sync.Once
	file_batch_proto_rawDescData []byte
)

func file_batch_proto_rawDescGZIP() []byte {
	file_batch_proto_rawDescOnce.Do(func() {
		file_batch_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_batch_proto_rawDesc), len(file_batch_proto_rawDesc)))
	})
	return file_batch_proto_rawDescData
}

var file_batch_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_batch_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_batch_proto_goTypes = []any{
	(KeyType)(0),             // 0: proto.KeyType
	(*MultiSwap)(nil),        // 1: proto.MultiSwap
	(*Asset)(nil),            // 2: proto.Asset
	(*Swap)(nil),             // 3: proto.Swap
	(*SwapKey)(nil),          // 4: proto.SwapKey
	(*Batch)(nil),            // 5: proto.Batch
	(*InitArgs)(nil),         // 6: proto.InitArgs
	(*WriteElement)(nil),     // 7: proto.WriteElement
	(*ResponseError)(nil),    // 8: proto.ResponseError
	(*SwapResponse)(nil),     // 9: proto.SwapResponse
	(*AccountingRecord)(nil), // 10: proto.AccountingRecord
	(*Event)(nil),            // 11: proto.Event
	(*TxResponse)(nil),       // 12: proto.TxResponse
	(*BatchTxEvent)(nil),     // 13: proto.BatchTxEvent
	(*BatchEvent)(nil),       // 14: proto.BatchEvent
	(*BatchResponse)(nil),    // 15: proto.BatchResponse
	(*Nested)(nil),           // 16: proto.Nested
	(*TokenFee)(nil),         // 17: proto.TokenFee
	(*TokenRate)(nil),        // 18: proto.TokenRate
	(*Token)(nil),            // 19: proto.Token
	(*HaveRight)(nil),        // 20: proto.HaveRight
	(*Right)(nil),            // 21: proto.Right
	(*AccountRights)(nil),    // 22: proto.AccountRights
	(*Accounts)(nil),         // 23: proto.Accounts
	(*Operations)(nil),       // 24: proto.Operations
	(*OperationRights)(nil),  // 25: proto.OperationRights
	(*Industrial)(nil),       // 26: proto.Industrial
	(*IndustrialGroup)(nil),  // 27: proto.IndustrialGroup
	(*AccountInfo)(nil),      // 28: proto.AccountInfo
	(*Address)(nil),          // 29: proto.Address
	(*AdditionalKey)(nil),    // 30: proto.AdditionalKey
	(*SignedAddress)(nil),    // 31: proto.SignedAddress
	(*SignaturePolicy)(nil),  // 32: proto.SignaturePolicy
	(*AclResponse)(nil),      // 33: proto.AclResponse
	(*Nonce)(nil),            // 34: proto.Nonce
	(*PendingTx)(nil),        // 35: proto.PendingTx
	(*Pair)(nil),             // 36: proto.pair
	(*CCTransfer)(nil),       // 37: proto.CCTransfer
	(*CCTransfers)(nil),      // 38: proto.CCTransfers
	(*CCTransferItem)(nil),   // 39: proto.CCTransferItem
}
var file_batch_proto_depIdxs = []int32{
	2,  // 0: proto.MultiSwap.assets:type_name -> proto.Asset
	3,  // 1: proto.SwapKey.swap:type_name -> proto.Swap
	1,  // 2: proto.SwapKey.multiSwap:type_name -> proto.MultiSwap
	3,  // 3: proto.Batch.swaps:type_name -> proto.Swap
	4,  // 4: proto.Batch.keys:type_name -> proto.SwapKey
	4,  // 5: proto.Batch.multi_swaps_keys:type_name -> proto.SwapKey
	1,  // 6: proto.Batch.multi_swaps:type_name -> proto.MultiSwap
	35, // 7: proto.Batch.pendings:type_name -> proto.PendingTx
	8,  // 8: proto.SwapResponse.error:type_name -> proto.ResponseError
	7,  // 9: proto.SwapResponse.writes:type_name -> proto.WriteElement
	8,  // 10: proto.TxResponse.error:type_name -> proto.ResponseError
	7,  // 11: proto.TxResponse.writes:type_name -> proto.WriteElement
	8,  // 12: proto.BatchTxEvent.error:type_name -> proto.ResponseError
	11, // 13: proto.BatchTxEvent.events:type_name -> proto.Event
	10, // 14: proto.BatchTxEvent.accounting:type_name -> proto.AccountingRecord
	13, // 15: proto.BatchEvent.events:type_name -> proto.BatchTxEvent
	12, // 16: proto.BatchResponse.tx_responses:type_name -> proto.TxResponse
	3,  // 17: proto.BatchResponse.created_swaps:type_name -> proto.Swap
	9,  // 18: proto.BatchResponse.swap_responses:type_name -> proto.SwapResponse
	9,  // 19: proto.BatchResponse.swap_key_responses:type_name -> proto.SwapResponse
	1,  // 20: proto.BatchResponse.created_multi_swap:type_name -> proto.MultiSwap
	29, // 21: proto.TokenRate.issuer:type_name -> proto.Address
	17, // 22: proto.Token.fee:type_name -> proto.TokenFee
	18, // 23: proto.Token.rates:type_name -> proto.TokenRate
	29, // 24: proto.Right.address:type_name -> proto.Address
	20, // 25: proto.Right.haveRight:type_name -> proto.HaveRight
	29, // 26: proto.AccountRights.address:type_name -> proto.Address
	21, // 27: proto.AccountRights.rights:type_name -> proto.Right
	29, // 28: proto.Accounts.addresses:type_name -> proto.Address
	21, // 29: proto.OperationRights.rights:type_name -> proto.Right
	27, // 30: proto.Industrial.groups:type_name -> proto.IndustrialGroup
	17, // 31: proto.Industrial.fee:type_name -> proto.TokenFee
	18, // 32: proto.Industrial.rates:type_name -> proto.TokenRate
	29, // 33: proto.SignedAddress.address:type_name -> proto.Address
	32, // 34: proto.SignedAddress.signaturePolicy:type_name -> proto.SignaturePolicy
	30, // 35: proto.SignedAddress.additionalKeys:type_name -> proto.AdditionalKey
	28, // 36: proto.AclResponse.account:type_name -> proto.AccountInfo
	31, // 37: proto.AclResponse.address:type_name -> proto.SignedAddress
	0,  // 38: proto.AclResponse.keyTypes:type_name -> proto.KeyType
	29, // 39: proto.PendingTx.sender:type_name -> proto.Address
	36, // 40: proto.PendingTx.pairs:type_name -> proto.pair
	39, // 41: proto.CCTransfer.items:type_name -> proto.CCTransferItem
	37, // 42: proto.CCTransfers.ccts:type_name -> proto.CCTransfer
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_batch_proto_init() }
func file_batch_proto_init() {
	if File_batch_proto != nil {
		return
	}
	file_batch_proto_msgTypes[3].OneofWrappers = []any{
		(*SwapKey_Swap)(nil),
		(*SwapKey_MultiSwap)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_batch_proto_rawDesc), len(file_batch_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_batch_proto_goTypes,
		DependencyIndexes: file_batch_proto_depIdxs,
		EnumInfos:         file_batch_proto_enumTypes,
		MessageInfos:      file_batch_proto_msgTypes,
	}.Build()
	File_batch_proto = out.File
	file_batch_proto_goTypes = nil
	file_batch_proto_depIdxs = nil
}
