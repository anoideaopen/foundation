syntax = "proto3";

package proto;

option go_package = "./;proto";

message BalanceLockRequest {
  string id = 1; // идентификатор блокировки (  опциональный параметр, если не указан - используется txID)
  string address = 2; // адрес владельца
  string token = 3; // идентификатор / тикер токена
  string amount = 4; // big.Int количество токенов для блокировки
  string reason = 5; // причина блокировки
  repeated bytes docs = 6 ; // хэши документов с обоснованием (опциональный параметр)
  bytes payload = 7 ; // дополнительная информация (опциональный параметр)
}

// Стейт: данные о блокировке токен баланса
message TokenBalanceLock {
  string id = 1; // идентификатор блокировки (опциональный параметр, если не указан - используется txID)
  string address = 2; // адрес владельца
  string token = 3; // идентификатор / тикер токена
  string init_amount = 4; // big.Int первоначальное количество токенов для блокировки
  string current_amount = 5; // big.Int текущее количество заблокированных токенов
  string reason = 6; // причина блокировки
  repeated bytes docs = 7; // хэши документов с обоснованием (опциональный параметр)
  bytes payload = 8; // дополнительная информация (опциональный параметр)
}

// Стейт: данные о блокировке аловед баланса
message AllowedBalanceLock {
  string id = 1; // идентификатор блокировки (опциональный параметр, если не указан - используется txID)
  string address = 2; // адрес владельца
  string token = 3; // идентификатор / тикер токена
  string init_amount = 4; // big.Int первоначальное количество токенов для блокировки
  string current_amount = 5; // big.Int текущее количество заблокированных токенов
  string reason = 6; // причина блокировки
  repeated bytes docs = 7; // хэши документов с обоснованием (опциональный параметр)
  bytes payload = 8; // дополнительная информация (опциональный параметр)
}

// Событие: токен баланс заблокирован
message TokenBalanceLocked {
  string id = 1; // идентификатор блокировки
  string address = 2; // адрес владельца
  string token = 3; // идентификатор / тикер токена
  string amount = 4; // big.Int количество токенов для блокировки
  string reason = 5; // причина блокировки
  repeated bytes docs = 6; // хэши документов с обоснованием (опциональный параметр)
  bytes payload = 7; // дополнительная информация (опциональный параметр)
}

// Событие: токен баланс разблокирован
message TokenBalanceUnlocked {
  string id = 1; // идентификатор блокировки
  string address = 2; // адрес владельца
  string token = 3; // идентификатор / тикер токена
  string amount = 4; // big.Int количество токенов для разблокировки
  string reason = 5; // причина блокировки
  repeated bytes docs = 6; // хэши документов с обоснованием (опциональный параметр)
  bytes payload = 7; // дополнительная информация (опциональный параметр)
  bool complete_operation = 8; // признак, что раблокировано полностью
}

// Событие: токен баланс заблокирован
message AllowedBalanceLocked {
  string id = 1; // идентификатор блокировки
  string address = 2; // адрес владельца
  string token = 3; // идентификатор / тикер токена
  string amount = 4; // big.Int количество токенов для блокировки
  string reason = 5; // причина блокировки
  repeated bytes docs = 6; // хэши документов с обоснованием (опциональный параметр)
  bytes payload = 7; // дополнительная информация (опциональный параметр)
}

// Событие: токен баланс разблокирован
message AllowedBalanceUnlocked {
  string id = 1; // идентификатор блокировки
  string address = 2; // адрес владельца
  string token = 3; // идентификатор / тикер токена
  string amount = 4; // big.Int количество токенов для разблокировки
  string reason = 5; // причина блокировки
  repeated bytes docs = 6; // хэши документов с обоснованием (опциональный параметр)
  bytes payload = 7; // дополнительная информация (опциональный параметр)
  bool complete_operation = 8; // признак, что раблокировано полностью
}